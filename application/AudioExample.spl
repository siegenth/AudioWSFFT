namespace application ;

use com.ibm.streamsx.inet.rest::HTTPTupleView ;
use com.ibm.streamsx.inet.wsserver::WebSocketInject ;
use com.ibm.streamsx.inet.rest::WebContext ;
use com.ibm.streamsx.json::JSONToTuple ;
use com.ibm.streamsx.json::TupleToJSON ;
type BinaryDataType = tuple<blob outBuf> ;
type AudioDataType = tuple<rstring id, rstring command, blob outBuf> ;
int64 getMilliseconds(timestamp ts)
{
	return(getSeconds(ts) * 1000l) +(int64)(getNanoseconds(ts) / 1000000u) ;
}
/**
 * Convert A 2 character string to binary value.
 * Yes this can be collapsed, but you can see this. 
 */
uint8 hexToInt(list<uint8> cvt)
{
	mutable uint8 l, h ;
	mutable uint8 low, high ;
	l = cvt [ 0 ] -(uint8) 48 ;
	h = cvt [ 1 ] -(uint8) 48 ;
	list<uint8> mapp = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 10,
		11, 12, 13, 14, 15 ] ;
		//////////////////// 0, 1, 2, 3, 4, 5, 6. 7, 8, 9, :, ;, <, =, >, ?, @,  A, B, C, D, E, F
	low = mapp [ l ] << 4 ;
	high = mapp [ h ] ;
	return(low | high) ;
}

composite AudioSample
{
	graph
		() as WebContext_3 = WebContext()
		{
			param
			// URL : http:<IP>:8081//html gets to index.thml 
			//       in "/home/streamsadmin/Development/html" ;  
				context : "html" ; // notice, no leading '/',  
				//contextResourceBase : getThisToolkitDir() + "/opt/html" ;
				// set to development directory so I can change things rapidly,
				// without redeploying the application. 
				//contextResourceBase : "/mnt/streamsadmin/Development/html" ;
				//contextResourceBase : "/xxxxx";
				contextResourceBase : "/mnt/hgfs/shareVM/CROSSDEV/audio/opt/html" ;
				// NOTE the only way I got this to work is to mess up the Data directory
				// that is set on the build??? I should be to the opt directory. 
				port : 8080 ;
		}

		(stream<WebSocketInject_2_out0> FileSink_7_out0) as waveFileWrite =
			FileSink(Custom_5_out0 as inputStream)
		{
			param
				file : "/tmp/COMP{localtime:%d%M}{ID}.wav" ;
				closeMode : punct ;
				format : block ;
				flush :(uint32) 1 ;
		}

		(stream<rstring data> WebSocketInject_2_out0) as WebSocketInject_2 =
		//(stream<list<uint16> data> WebSocketInject_2_out0) as WebSocketInject_2 =
		WebSocketInject()
		{
			param
				port : 8086 ;
			config
				placement : partitionColocation("jettyStatus") ;
		}

		(stream<BinaryDataType> Custom_5_out0 as wavFileOut ; stream<AudioDataType>
			wavStreamOut) as hexToBinay = Custom(Filter_6_out0 as hexIn ; Filter_6_out1
			as fileControl)
		{
			logic
				state :
				{
					list<uint8> resetOut = [ ] ;
					mutable list<uint8> out ;
					mutable BinaryDataType bdt ;
					mutable list<uint8> cvt ;
					mutable int32 hash1, hash2 ;
					mutable AudioDataType adt ;
				}

				onTuple hexIn :
				{
					out = resetOut ;
					if((length(data) != 0) &&(data [ 0 ] == "#"))
					{
						hash1 = findFirst(data, "#", 1) ;
						if(hash1 != - 1)
						{
							hash2 = findFirst(data, "#", hash1 + 1) ;
							if(hash2 != - 1)
							{
								adt.id = data [ 1 : hash1 ] ;
								adt.command = data [ hash1 + 1 : hash2 ] ;
								println("AUDIO rcv id:" + adt.id + " command:" + adt.command +
									" length:" +(rstring) length(data)) ;
								if(adt.command == "DATA")
								{
									cvt =(list<uint8>) convertToBlob(data [ hash2 + 1 : ]) ;
									for(int32 i in range(0, size(cvt), 2))
									{
										appendM(out, hexToInt(cvt [ i : i + 2 ])) ;
									}
									adt.outBuf =(blob) out ;
									submit(adt, wavStreamOut) ;
								}

								else if(adt.command == "STOP")
								{
									submit(Sys.WindowMarker, wavStreamOut) ;
								}

							}

						}

					}

					else
					{ // File Data
						cvt =(list<uint8>) convertToBlob(data) ;
						for(int32 i in range(0, size(cvt), 2))
						{
							appendM(out, hexToInt(cvt [ i : i + 2 ])) ;
						}

						bdt.outBuf =(blob) out ;
						submit(bdt, wavFileOut) ;
					}

				}

				onTuple fileControl :
				{
					if(data [ 0 : 5 ] == "<END>")
					{
						println("End of file") ;
						submit(Sys.WindowMarker, wavFileOut) ;
					}

				}

			}

		(stream<WebSocketInject_2_out0> Filter_6_out0 ;
			stream<WebSocketInject_2_out0> Filter_6_out1) as selectControlData =
				Filter(WebSocketInject_2_out0)
			{
				param
					filter :(length(data) > 0) &&(data [ 0 ] != '<') ;
			}

		() as messageSink = FileSink(Filter_6_out1, FileSink_7_out0, FileSink_7_out1)
			{
				param
					file : "/dev/stdout" ;
					format : line ;
					flush :(uint32) 1 ;
			}

		(stream<WebSocketInject_2_out0> FileSink_7_out1) as FileSink_7 =
				FileSink(Functor_8_out0 as inPort0Alias)
			{
				param
					file : "/tmp/STRM{localtime:%d%M}{id}.wavraw" ;
					closeMode : punct ;
					format : block ;
					flush :(uint32) 1 ;
			}

		(stream<BinaryDataType> Functor_8_out0) as Functor_8 = Functor(wavStreamOut)
			{
			}

	}
